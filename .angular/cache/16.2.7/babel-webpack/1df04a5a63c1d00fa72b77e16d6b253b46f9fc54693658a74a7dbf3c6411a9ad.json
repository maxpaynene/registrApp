{"ast":null,"code":"var _class;\nimport { inject } from '@angular/core';\nimport { FirebaseService } from '../services/firebase.service';\nimport { UtilsService } from '../services/utils.service';\nimport * as i0 from \"@angular/core\";\nclass AuthGuard {\n  constructor() {\n    this.firebaseSvc = inject(FirebaseService);\n    this.utilsSvc = inject(UtilsService);\n  }\n  canActivate(route, state) {\n    let user = localStorage.getItem('user');\n    return new Promise(resolve => {\n      this.firebaseSvc.getAuth().onAuthStateChanged(auth => {\n        if (auth) {\n          if (user) resolve(true);\n        } else {\n          this.utilsSvc.routerLink('/auth');\n          resolve(false);\n        }\n      });\n    });\n  }\n}\n_class = AuthGuard;\n_class.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport { AuthGuard };","map":{"version":3,"names":["inject","FirebaseService","UtilsService","AuthGuard","constructor","firebaseSvc","utilsSvc","canActivate","route","state","user","localStorage","getItem","Promise","resolve","getAuth","onAuthStateChanged","auth","routerLink","factory","ɵfac","providedIn"],"sources":["/Users/mozartcatrina/Desktop/jorgito/registrApp/src/app/guards/auth.guard.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { FirebaseService } from '../services/firebase.service';\nimport { UtilsService } from '../services/utils.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n\n  firebaseSvc = inject(FirebaseService);\n  utilsSvc = inject(UtilsService)\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n\n    let user = localStorage.getItem('user');\n\n    return new Promise((resolve) => {\n\n      this.firebaseSvc.getAuth().onAuthStateChanged((auth) => {\n\n        if(auth){\n          if (user) resolve(true)\n        }\n      else{\n        this.utilsSvc.routerLink('/auth');\n        resolve(false);\n      }\n      })\n\n    });\n  }\n\n}\n"],"mappings":";AAAA,SAAqBA,MAAM,QAAQ,eAAe;AAGlD,SAASC,eAAe,QAAQ,8BAA8B;AAC9D,SAASC,YAAY,QAAQ,2BAA2B;;AAExD,MAGaC,SAAS;EAHtBC,YAAA;IAME,KAAAC,WAAW,GAAGL,MAAM,CAACC,eAAe,CAAC;IACrC,KAAAK,QAAQ,GAAGN,MAAM,CAACE,YAAY,CAAC;;EAE/BK,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IAE1B,IAAIC,IAAI,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAEvC,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAI;MAE7B,IAAI,CAACT,WAAW,CAACU,OAAO,EAAE,CAACC,kBAAkB,CAAEC,IAAI,IAAI;QAErD,IAAGA,IAAI,EAAC;UACN,IAAIP,IAAI,EAAEI,OAAO,CAAC,IAAI,CAAC;SACxB,MACC;UACF,IAAI,CAACR,QAAQ,CAACY,UAAU,CAAC,OAAO,CAAC;UACjCJ,OAAO,CAAC,KAAK,CAAC;;MAEhB,CAAC,CAAC;IAEJ,CAAC,CAAC;EACJ;;SA1BWX,SAAS;;mBAATA,MAAS;AAAA;;SAATA,MAAS;EAAAgB,OAAA,EAAThB,MAAS,CAAAiB,IAAA;EAAAC,UAAA,EAFR;AAAM;SAEPlB,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}